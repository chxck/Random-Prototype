<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pega_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement variables
hzpeed=0
vzpeed=0
jump_gravity=0.5
double_jump_gravity=0.5
gravityz=jump_gravity
facing=1
jump=0
jump_cancel=1
double_jump=0
dash=0
dashed=0
dash_cancel=0
spin=0
crouch=0
static=0

//Limites
max_walk_speed=8
walk_speed_growth=1
walk_speed_friction=1

max_walk_speed_air=8
walk_speed_growth_air=0.5
walk_speed_friction_air=0.5

dash_speed=15

jump_speed=14

double_jump_speed=12

jump_key=ord('A')
jump_button=gp_face1

dash_key=ord('S')
dash_button=gp_face3

action_key=ord('D')
action_button=gp_face2

time_multiplier=1

alarma[0]=0
alarma[1]=0
alarma[2]=0
alarma[3]=0
alarma[4]=0
alarma[5]=0
alarma[6]=0
alarma[7]=0
alarma[8]=0
alarma[9]=0
alarma[10]=0
alarma[11]=0

alarma_running[0]=0
alarma_running[1]=0
alarma_running[2]=0
alarma_running[3]=0
alarma_running[4]=0
alarma_running[5]=0
alarma_running[6]=0
alarma_running[7]=0
alarma_running[8]=0
alarma_running[9]=0
alarma_running[10]=0
alarma_running[11]=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dash_cancel=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dash=0
dashed=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gamepad_button_value(0,gp_shoulderlb) &lt;= 0.15 {time_multiplier=1}
if gamepad_button_value(0,gp_shoulderlb) &gt; 0.15
{
    time_multiplier=1-gamepad_button_value(0,gp_shoulderlb) 
}
if gamepad_button_value(0,gp_shoulderlb) &gt;0.98
{
    time_multiplier=0
}
if gamepad_button_check(0,gp_shoulderlb){time_multiplier=0.15}
else{time_multiplier=1}
if gamepad_button_check_pressed(0,gp_shoulderlb)
{
    instance_create(x,y,obj_partitura2)
}
if gamepad_button_check_released(0,gp_shoulderlb)
{
    if instance_exists(obj_partitura2)
    {
        with obj_partitura2
        {
            with obj_partitura2 {instance_destroy()}
        }
    }
}


if gamepad_button_value(0,gp_shoulderrb) &lt;= 0.05 {time_multiplier=1}
if gamepad_button_value(0,gp_shoulderrb) &gt; 0.05
{
    time_multiplier=1-gamepad_button_value(0,gp_shoulderrb) 
}
if gamepad_button_value(0,gp_shoulderrb) &gt;0.98
{
    time_multiplier=0
}

if instance_exists(obj_partitura2){static=1}

/////////////////////////HORIZONTAL MOVEMENT\\\\\\\\\\\\\\\\\\\\\\\\\\
//Suelo
if jump=0 &amp;&amp; dash=0
{
    if (keyboard_check(vk_right) || gamepad_axis_value(0,gp_axislh)&gt;0.5) &amp;&amp; static=0
    {
        if hzpeed&gt;(max_walk_speed-walk_speed_growth)
        {
            hzpeed=max_walk_speed
        }
        if hzpeed&lt;max_walk_speed
        {
            hzpeed+=(walk_speed_growth*time_multiplier)
        }
        facing=1
    }
    else if (keyboard_check(vk_left)|| gamepad_axis_value(0,gp_axislh)&lt;-0.5) &amp;&amp; static=0
    {
        if hzpeed&lt;(-max_walk_speed+walk_speed_growth)
        {
            hzpeed=-max_walk_speed
        }
        if hzpeed&gt;-max_walk_speed
        {
            hzpeed-=(walk_speed_growth*time_multiplier)
        }
        facing=-1
    }
    else 
    {
        if hzpeed&gt;0
        {
            hzpeed-=(walk_speed_friction*time_multiplier)
        }
        if hzpeed&lt;0
        {
            hzpeed+=(walk_speed_friction*time_multiplier)
        }
        if hzpeed&gt;(0-walk_speed_friction) &amp;&amp; hzpeed&lt;(0+walk_speed_friction)
        {
            hzpeed=0
        }
    }
}
//En el aire
else if jump=1 &amp;&amp; dash=0
{
    if (keyboard_check(vk_right)|| gamepad_axis_value(0,gp_axislh)&gt;0.5) &amp;&amp; static=0
    {
        if hzpeed&gt;(max_walk_speed_air-walk_speed_growth_air)
        {
            hzpeed=max_walk_speed_air
        }
        if hzpeed&lt;max_walk_speed_air
        {
            hzpeed+=(walk_speed_growth_air*time_multiplier)
        }
        facing=1
    }
    else if (keyboard_check(vk_left)|| gamepad_axis_value(0,gp_axislh)&lt;-0.5) &amp;&amp; static=0
    {
        if hzpeed&lt;(-max_walk_speed_air+walk_speed_growth_air)
        {
            hzpeed=-max_walk_speed_air
        }
        if hzpeed&gt;-max_walk_speed_air
        {
            hzpeed-=(walk_speed_growth_air*time_multiplier)
        }
        facing=-1
    }
    else 
    {
        if hzpeed&gt;0
        {
            hzpeed-=(walk_speed_friction_air*time_multiplier)
        }
        if hzpeed&lt;0
        {
            hzpeed+=(walk_speed_friction_air*time_multiplier)
        }
        if hzpeed&gt;(0-walk_speed_friction_air) &amp;&amp; hzpeed&lt;(0+walk_speed_friction_air)
        {
            hzpeed=0
        }
    }
}

/////////////////////////SALTO\\\\\\\\\\\\\\\\\\\\\\\\\\
if (keyboard_check_pressed(jump_key) || gamepad_button_check_pressed(0,jump_button)) &amp;&amp; jump==1 &amp;&amp; double_jump=0 &amp;&amp; dash==0 &amp;&amp; static=0
{
    vzpeed=-double_jump_speed;
    jump_cancel=0
    double_jump=1
    gravityz=double_jump_gravity
    spin=0
    image_index=1
    if keyboard_check(vk_right) || gamepad_axis_value(0,gp_axislh)&gt;0.5{hzpeed=max_walk_speed_air}
    if keyboard_check(vk_left) || gamepad_axis_value(0,gp_axislh)&lt;-0.5{hzpeed=-max_walk_speed_air}
}
if (keyboard_check_pressed(jump_key) || gamepad_button_check_pressed(0,jump_button)) &amp;&amp; jump==0 &amp;&amp; dash==0 &amp;&amp; static=0
{
    vzpeed=-jump_speed;
    image_index=0
    spin=0
    if keyboard_check(vk_right) || gamepad_axis_value(0,gp_axislh)&gt;0.5{hzpeed=max_walk_speed_air}
    if keyboard_check(vk_left) || gamepad_axis_value(0,gp_axislh)&lt;-0.5{hzpeed=-max_walk_speed_air}
}
if ((!keyboard_check(jump_key) &amp;&amp; (!gamepad_button_check(0,jump_button))) &amp;&amp; vzpeed&lt;-3) &amp;&amp; jump_cancel=1 &amp;&amp; dash==0 &amp;&amp; static=0
{
    vzpeed=-3;
}
/////////////////////////DASH CANCEL\\\\\\\\\\\\\\\\\\\\\\\\\\
if (keyboard_check_pressed(jump_key) || gamepad_button_check_pressed(0,jump_button)) &amp;&amp; dash_cancel=1
{
    vzpeed=-jump_speed;
    hzpeed=0
    jump_cancel=0
    dash_cancel=0
    double_jump=0
    dashed=0
    dash=0
    spin=1
    alarma[0]=-1
    alarma_running[0]=0
    alarma[1]=-1
    alarma_running[1]=0
    image_index=0
    if keyboard_check(vk_right) || gamepad_axis_value(0,gp_axislh)&gt;0.5{hzpeed=max_walk_speed_air}
    if keyboard_check(vk_left) || gamepad_axis_value(0,gp_axislh)&lt;-0.5{hzpeed=-max_walk_speed_air}
}

/////////////////////////DASHING\\\\\\\\\\\\\\\\\\\\\\\\\\
if (keyboard_check_pressed(dash_key) || gamepad_button_check_pressed(0,dash_button)) &amp;&amp; dash=0 &amp;&amp; dashed=0 &amp;&amp; static=0
{
    dash=1
    dashed=1
    spin=0
    sprite_index=spr_pega_dash
    image_index=0
    alarma[0]=30
}
if dash==1
{
    hzpeed=dash_speed*facing
    vzpeed=0
    spin=0
}

/////////////////////////VELOCIDADES Y GRAVEDAD\\\\\\\\\\\\\\\\\\\\\\\\\\
vzpeed+=(gravityz*time_multiplier)
if vzpeed&gt;15{vzpeed=15}
//Velocidad horizontal y colisiones
if (hzpeed&gt;0)
{
    repeat(hzpeed)
    {        
        if collision_line(floor(x)-11,floor(y),floor(x)+13,floor(y),obj_platform,1,1) &amp;&amp; !collision_line(floor(x)-11,floor(y)-1,floor(x)+13,floor(y)-1,obj_block,1,1){{x+=1*time_multiplier;y-=1*time_multiplier}}
        else if collision_line(floor(x)-11,floor(y)+2,floor(x)+13,floor(y)+2,obj_platform,1,1) &amp;&amp; !collision_line(floor(x)-11,floor(y)+1,floor(x)+13,floor(y)+1,obj_block,1,1){{x+=1*time_multiplier;y+=1*time_multiplier}}
        else if !collision_line(floor(x)-11,floor(y),floor(x)+13,floor(y),obj_block,1,1){x+=1*time_multiplier}
    }
}
if (hzpeed&lt;0)
{
    repeat(-hzpeed)
    {
        if collision_line(floor(x)-13,floor(y),floor(x)+11,floor(y),obj_platform,1,1) &amp;&amp; !collision_line(floor(x)-13,floor(y)-1,floor(x)+11,floor(y)-1,obj_block,1,1){{x-=1*time_multiplier;y-=1*time_multiplier}}
        else if collision_line(floor(x)-13,floor(y)+2,floor(x)+11,floor(y)+2,obj_platform,1,1) &amp;&amp; !collision_line(floor(x)-13,floor(y)+1,floor(x)+11,floor(y)+1,obj_block,1,1){{x-=1*time_multiplier;y+=1*time_multiplier}}
        else if !collision_line(floor(x)-13,floor(y),floor(x)+11,floor(y),obj_block,1,1){x-=1*time_multiplier}
    }
}
//Velocidad vertical y colisiones
if (vzpeed&gt;0)
{
    repeat(vzpeed)
    {
        if !collision_line(floor(x)-12,floor(y),floor(x)+12,y,obj_platform,1,1){y+=1*time_multiplier;}
    }
}
if (vzpeed&lt;0)
{
    repeat(-vzpeed)
    {
        if !position_meeting(floor(x),floor(y)-1,obj_block){y-=1*time_multiplier;}
    }
}
/////////////////////////COLISIONES EXTRA\\\\\\\\\\\\\\\\\\\\\\\\\\
//Empujar player desde pared derecha
if position_meeting(floor(x)+12,floor(y)-1,obj_block)
{
    if !position_meeting(floor(x)-1,floor(y)-1,obj_block)
    {
        do 
        {
            x-=1
        } 
        until (!collision_line(floor(x)-12,floor(y)-1,floor(x)+12,floor(y)-1,obj_block,1,1))
    }
}
//Empujar player desde pared izquierda
if position_meeting(floor(x)-12,floor(y)-1,obj_block)
{
    if !position_meeting(floor(x)+1,floor(y)-1,obj_block)
    {
        do 
        {
            x+=1 
        }
        until (!collision_line(floor(x)-12,floor(y)-1,floor(x)+12,floor(y)-1,obj_block,1,1))
    }
}
//Chocar con techo
if position_meeting(floor(x),floor(y)-48,obj_block) &amp;&amp; vzpeed&lt;0
{
    vzpeed=0;
}
//Landing
if position_meeting(floor(x),floor(y),obj_platform) &amp;&amp; vzpeed&gt;=0
{
    vzpeed=0;if !position_meeting(floor(x),floor(y)-1,obj_block){y-=1;}
}
//More landing
if collision_line(floor(x)-12,floor(y)+1,floor(x)+12,floor(y)+1,obj_platform,1,1) &amp;&amp; vzpeed&gt;=0
{
    if jump!=0
    {
        //LANDING SFX
    }
    jump=0;
    vzpeed=0;
    jump_cancel=1
    double_jump=0
    gravityz=jump_gravity
    dashed=0
    spin=0
}
else 
{
    jump=1
}
//Crouching
if (keyboard_check(vk_down) || gamepad_axis_value(0,gp_axislv)&gt;0.3) &amp;&amp; jump==0 &amp;&amp; hzpeed==0 &amp;&amp; dash==0
{
    if crouch&lt;1{crouch+=0.2*time_multiplier}
    if crouch&gt;1{crouch=1}
}
else
{
    if crouch&gt;0{crouch-=0.2*time_multiplier}
    if crouch&lt;0{crouch=0}
}
if jump!=0 || hzpeed!=0 || dash!=0
{
    crouch=0
}
//Comer
if keyboard_check(vk_down) || gamepad_axis_value(0,gp_axislv)&gt;0.3 &amp;&amp; crouch&gt;0 &amp;&amp; (keyboard_check_pressed(action_key)|| gamepad_button_check_pressed(0,action_button))
{
    static=1
    sprite_index=spr_pega_down_eat
    bla=instance_create(x,y,obj_eating_hitbox)
    bla.image_xscale=facing
}
/////////////////////////CORRECCIÓN DE SPRITES Y ANIMACIONES\\\\\\\\\\\\\\\\\\\\\\\\\\
image_xscale=facing
//Movimiento básico
{
    if (hzpeed!=0 &amp;&amp; jump==0 &amp;&amp; dash==0){sprite_index=spr_pega_walk;}
    else if jump==1 &amp;&amp; dash==0 &amp;&amp; spin==0 {sprite_index=spr_pega_flap_jump}
    else if jump==1 &amp;&amp; dash==0 &amp;&amp; spin==1 {sprite_index=spr_pega_jump_forward}
    else if dash==0{sprite_index=spr_pega_idle;}
    if crouch!=0{if sprite_index==spr_pega_idle{sprite_index=spr_pega_idle_down;image_index=crouch}}
    if sprite_index==spr_pega_idle{image_speed=0.15*time_multiplier}
    if sprite_index==spr_pega_walk{image_speed=0.25*time_multiplier}
    if sprite_index==spr_pega_flap_jump
    {
        if image_index&lt;6
        {
            image_speed=0.25*time_multiplier
        }
        else
        {
            image_speed=0
        }
    }
    if sprite_index==spr_pega_jump_forward{image_speed=0.2*time_multiplier}
    if sprite_index==spr_pega_dash
    {
        image_speed=0.5*time_multiplier
    }
}
if static=1
{
    if sprite_index=spr_pega_down_eat{image_speed=0.2*time_multiplier;crouch=1}
    if sprite_index!=spr_pega_down_eat{static=0}
}
global.time_multiplier=time_multiplier
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Alarmas</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Countdown
if alarma[0]&gt;-1
{       
    if alarma[0]&gt;0{alarma_running[0]=1}
    alarma[0]-=time_multiplier
    if alarma[0]&lt;-1{alarma[0]=-1}
    if alarma[0]=-1{alarma_running[0]=0}
}
if alarma[1]&gt;-1
{       
    if alarma[1]&gt;0{alarma_running[1]=1}
    alarma[1]-=time_multiplier
    if alarma[1]&lt;-1{alarma[1]=-1}
    if alarma[1]=-1{alarma_running[1]=0}
}

//Events
if alarma[0]&lt;=0 &amp;&amp; alarma_running[0]=1
{
    alarma_running[0]=0
    //código alarma
    dash=0
    dashed=1
}
if alarma[1]&lt;=0 &amp;&amp; alarma_running[1]=1
{
    alarma_running[1]=0
    //código alarma
    dash_cancel=0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index=spr_pega_jump_forward{image_index=8}
if sprite_index=spr_pega_down_eat{static=0}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
